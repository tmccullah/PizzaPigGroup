import javafx.scene.layout.*;
import javafx.scene.control.Button;
import javafx.scene.text.Font;
import javafx.event.EventHandler;
import javafx.event.ActionEvent;
import javafx.geometry.Insets;
import java.util.ArrayList;
import javafx.scene.control.TextField;

// import JavaFX package with its subpackages and classes & ArrayList class from util package


/******************************************************************************************************

NAME: Tori McCullah

DATE: 09/11/2017

******************************************************************************************************/


public class KeyPadPane extends Pane {

// grid pane will organize buttons in an ordered fashion
   private GridPane grid = new GridPane();
   private BorderPane border = new BorderPane();
   
// create buttons for all the keys on the keyboard
   private Button num1 = new Button("1"); 
   private Button num2 = new Button("2");
   private Button num3 = new Button("3"); 
   private Button num4 = new Button("4"); 
   private Button num5 = new Button("5"); 
   private Button num6 = new Button("6"); 
   private Button num7 = new Button("7"); 
   private Button num8 = new Button("8");
   private Button num9 = new Button("9"); 
   private Button num0 = new Button("0");
   private Button backspace = new Button("delete");
   private Button enter = new Button("enter");
   
   private String keyEntry = "";
   
   protected ArrayList<Button> buttonList = new ArrayList<>();
   protected TextField tf = new TextField();
   
   
   public KeyPadPane() {
   }
   
   
// establish contructor   
   public KeyPadPane(TextField tf) {
   
      this.tf = tf;
      
      
   // add buttons to upperCasesGrid
      grid.addRow(0, num1, num2, num3);
      grid.addRow(1, num4, num5, num6);
      grid.addRow(2, num7, num8, num9);
      grid.addRow(3, backspace, num0, enter);
      
      
   // add all buttons to button list
      buttonList.add(num0);
      buttonList.add(num1);
      buttonList.add(num2);
      buttonList.add(num3);
      buttonList.add(num4);
      buttonList.add(num5);
      buttonList.add(num6);
      buttonList.add(num7);
      buttonList.add(num8);
      buttonList.add(num9);
      buttonList.add(enter);
      buttonList.add(backspace); 

   // format all buttons in list
      styleManyButtons(buttonList);
      
      
   // action when button is clicked, temporarily will print onto console
      for (Button b: buttonList) {
         b.setOnAction( e -> {
            String s = getKeyEntry(b);
            System.out.println(s);
  //************************************* !!!!!!!!!! remember to remove print statement !!!!!!!!!!!!!!!!
            tf.setText(s);
         });
      }

      
   // set format for upper case grid settings
      grid.setPrefWidth(600);
      grid.setPrefHeight(200);
      grid.setPadding(new Insets(10, 10, 10, 10));
      grid.setHgap(5);
      grid.setVgap(5);
      
   // add grid to center of border
      border.setCenter(grid);


   // add border pane to keyboard
      getChildren().add(border);
      
   }

 
   
   public String getKeyEntry (Button b) {
   // assign a string to button's label, which will represent a keyboard character
      String s = b.getText();
 
      if (s.equals("delete")) {
         if (keyEntry.length() > 0)
         // delete acts as the backspace
            keyEntry = keyEntry.substring(0, keyEntry.length()-1);
      }
      
   // otherwise append the character to the keyEntry string
      else
         keyEntry += s;
      
      
      return keyEntry;
   }
   

   
   public void buttonStyle(Button b) {
      b.setStyle("-fx-font: 18px 'Verdana'; -fx-base: #b6e7c9; -fx-min-width: 20px; -fx-max-width: 130px");
   }
 
   
// styles a set of buttons in an array list to specified style
   public void styleManyButtons(ArrayList <Button> bList) {
      for (Button b: bList)
         buttonStyle(b);
   }
   
   
// method for retriving tf entry
   public String getTF() {
      return tf.getText();
   }

}
