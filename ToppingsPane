import javafx.scene.layout.*;
import javafx.scene.control.Button;
import javafx.scene.text.Font;
import javafx.event.EventHandler;
import javafx.event.ActionEvent;
import javafx.geometry.Insets;
import java.util.ArrayList;
import javafx.scene.control.ContentDisplay;

// import JavaFX package with its subpackages and classes & ArrayList class from util package


/******************************************************************************************************

NAME: Tori McCullah

DATE: 09/08/2017

******************************************************************************************************/



public class ToppingsPane extends Pane {


// grid pane will organize buttons in an ordered fashion
   private GridPane grid = new GridPane();
   

// create buttons for all the topping choices
   protected Button extraCheese = new Button("extra cheese"); 
   protected Button extraSauce = new Button("extra sauce"); 
   protected Button pepperoni = new Button("pepperoni"); 
   protected Button mushrooms = new Button("mushrooms");  
   protected Button olives = new Button("olives"); 
   protected Button italianSausage = new Button("italian sausage"); 
   protected Button chicken = new Button("chicken"); 
   protected Button anchovies = new Button("anchovies"); 
   protected Button spinach = new Button("spinach"); 
   protected Button artichokes = new Button("artichokes"); 
   protected Button greenBellPepper = new Button("green bell pepper");
   protected Button sunDriedTomatoes = new Button("sun dried tomatoes"); 
   protected Button pineapple = new Button("pineapple"); 
   protected Button ham = new Button("ham"); 
   protected Button bacon = new Button("bacon"); 
   protected Button done = new Button("DONE");


// array list will store all the toppings selected
   protected ArrayList<String> toppingsList = new ArrayList<>();
   
// this will be used to edit functions of the buttons created above
// set private to limit manipulation
   private ButtonManipulation buttonEdit = new ButtonManipulation();
// array list will store all the buttons 
   protected ArrayList<Button> buttonList = new ArrayList<>();
   
   
// establish contructor   
   public ToppingsPane() {
   
   // add all buttons to buttonList in alphabetical order
      buttonList.add(anchovies); 
      buttonList.add(artichokes);
      buttonList.add(bacon); 
      buttonList.add(chicken); 
      buttonList.add(extraCheese);
      buttonList.add(extraSauce);
      buttonList.add(greenBellPepper);
      buttonList.add(ham);
      buttonList.add(italianSausage);
      buttonList.add(mushrooms);
      buttonList.add(olives);
      buttonList.add(pepperoni);
      buttonList.add(pineapple); 
      buttonList.add(spinach);
      buttonList.add(sunDriedTomatoes);
   // NOTE: done button not in list since it will behavior differently
   
   
   // edit all buttons to be styled as formatted in styleManyButtons method
      buttonEdit.styleManyButtons(buttonList);
 
  // format done differently to stand out since it behaves differently
      buttonEdit.buttonStyle2(done);
              
   
   // add buttons by row in groupd of four (the number of columns) to the grid
      grid.addRow(0, anchovies, artichokes, bacon, chicken);    
      grid.addRow(1, extraCheese, extraSauce, greenBellPepper, ham);
      grid.addRow(2, italianSausage, mushrooms, olives, pepperoni);
      grid.addRow(3, pineapple, spinach, sunDriedTomatoes, done);
      
   
   // each button in list passes this method
      for (Button b: buttonList)
         buttonEdit.buttonClicked(b, toppingsList);
      
   
   // deactivate buttons once done is clicked on
      done.setOnAction( e -> { deactivateButtons(); });
      
      
   // set gaps inbetween buttons and walls
      grid.setPadding(new Insets(30, 30, 30, 30)); 
      grid.setHgap(20);
      grid.setVgap(20);
      
   // grid is added to pane to represent the new pane
      getChildren().add(grid);
   }
  
   

// getter method for the array toppingsList
   public ArrayList getToppingsList() {
      return toppingsList;
   }
   
   
// to clear toppings list after each pizza is made
   public void resetToppingsList() {
      toppingsList.clear();
   }   
   
   
// method to turn all buttons on
   public void activateButtons() {
      for (Button b: buttonList)
         buttonEdit.turnOn(b);
   }
   

// method to turn all buttons off
   public void deactivateButtons() {
      for (Button b: buttonList) 
         buttonEdit.turnOff(b);
   }
       
}
